# === compare_versions.py –≤–µ—Ä—Å–∏—è v1.1-speed-compare ===
import csv
from pathlib import Path

root_dir = Path(__file__).parent

def find_latest_csv(prefix):
    files = sorted(root_dir.glob(f"{prefix}_*.csv"), key=lambda p: p.stat().st_mtime, reverse=True)
    return files[:2] if len(files) >= 2 else []

def read_accuracy(file_path):
    with open(file_path, encoding="utf-8") as f:
        reader = csv.reader(f)
        rows = list(reader)
    # –¢—ä—Ä—Å–∏–º —Ä–µ–¥ —Å "–¢–æ—á–Ω–æ—Å—Ç"
    for row in rows:
        if row and "–¢–æ—á–Ω–æ—Å—Ç" in row[0]:
            try:
                percent = float(row[0].split(":")[1].split("%")[0].strip())
                return percent
            except:
                pass
    return None

def read_speed(file_path):
    times = []
    with open(file_path, encoding="utf-8") as f:
        reader = csv.reader(f)
        header = next(reader, None)
        if not header or "AnalysisTimeSec" not in header:
            return None
        idx = header.index("AnalysisTimeSec")
        for row in reader:
            try:
                times.append(float(row[idx]))
            except:
                pass
    return sum(times) / len(times) if times else None

print(f"=== compare_versions.py –≤–µ—Ä—Å–∏—è v1.1-speed-compare ===")

# --- –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –Ω–∞ —Ç–æ—á–Ω–æ—Å—Ç ---
result_files = find_latest_csv("orientation_results")
if len(result_files) < 2:
    print("‚ö† –ù—è–º–∞ –¥–æ—Å—Ç–∞—Ç—ä—á–Ω–æ CSV —Ñ–∞–π–ª–æ–≤–µ –∑–∞ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ –Ω–∞ —Ç–æ—á–Ω–æ—Å—Ç—Ç–∞.")
else:
    new_file, old_file = result_files
    print(f"üìÇ –ù–æ–≤ —Ñ–∞–π–ª: {new_file.name}")
    print(f"üìÇ –°—Ç–∞—Ä —Ñ–∞–π–ª: {old_file.name}")

    # –¢—É–∫ –ø—Ä–∏–µ–º–∞–º–µ, —á–µ —Ç–æ—á–Ω–æ—Å—Ç—Ç–∞ –µ –≤ –∫—Ä–∞—è –Ω–∞ —Ñ–∞–π–ª–∞ (–∏–ª–∏ —â–µ —è —á–µ—Ç–µ–º –æ—Ç batch_orientation_check.py –∏–∑—Ö–æ–¥–∞)
    # –ê–∫–æ –∏—Å–∫–∞—à, –º–æ–∂–µ–º –¥–∞ —è –∏–∑—á–∏—Å–ª–∏–º –¥–∏—Ä–µ–∫—Ç–Ω–æ –æ—Ç CSV, –Ω–æ —Å–µ–≥–∞ —â–µ —è –æ—Å—Ç–∞–≤–∏–º –ø—Ä–∞–∑–Ω–∞
    print("‚ö† –¢–æ—á–Ω–æ—Å—Ç—Ç–∞ —Å–µ –∏–∑–≤–µ–∂–¥–∞ –æ—Ç batch_orientation_check.py, –∞ –Ω–µ –æ—Ç CSV.")

# --- –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –Ω–∞ —Å–∫–æ—Ä–æ—Å—Ç ---
speed_files = find_latest_csv("speed_results")
if len(speed_files) < 2:
    print("‚ö† –ù—è–º–∞ –¥–æ—Å—Ç–∞—Ç—ä—á–Ω–æ CSV —Ñ–∞–π–ª–æ–≤–µ –∑–∞ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ –Ω–∞ —Å–∫–æ—Ä–æ—Å—Ç—Ç–∞.")
else:
    new_speed, old_speed = speed_files
    avg_new = read_speed(new_speed)
    avg_old = read_speed(old_speed)
    if avg_new is not None and avg_old is not None:
        diff_sec = avg_new - avg_old
        diff_pct = (diff_sec / avg_old) * 100 if avg_old > 0 else 0
        print("\n‚è± –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –Ω–∞ —Å–∫–æ—Ä–æ—Å—Ç:")
        print(f"{old_speed.stem}: {avg_old:.2f} —Å–µ–∫ —Å—Ä–µ–¥–Ω–æ")
        print(f"{new_speed.stem}: {avg_new:.2f} —Å–µ–∫ —Å—Ä–µ–¥–Ω–æ ({diff_sec:+.2f} —Å–µ–∫, {diff_pct:+.1f}%)")
    else:
        print("‚ö† –ù–µ—É—Å–ø–µ—à–Ω–æ —á–µ—Ç–µ–Ω–µ –Ω–∞ –≤—Ä–µ–º–µ–Ω–∞—Ç–∞ –æ—Ç speed_results CSV.")